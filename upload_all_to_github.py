#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –≤–µ—Ç–æ–∫ –∏ —Ç–µ–≥–æ–≤ –Ω–∞ GitHub
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - –£—Å–ø–µ—à–Ω–æ")
            if result.stdout.strip():
                print(f"   {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå {description} - –û—à–∏–±–∫–∞")
            if result.stderr.strip():
                print(f"   {result.stderr.strip()}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def check_github_connection():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub...")
    
    success = run_command("git remote get-url origin", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
    if not success:
        print("‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: git remote add origin https://github.com/pavelstepanovpm/CredAnlv2.git")
        return False
    
    print("‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    run_command("git remote -v", "–ü—Ä–æ–≤–µ—Ä–∫–∞ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
    return True

def upload_branches():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –≤–µ—Ç–∫–∏ –Ω–∞ GitHub"""
    print("\nüì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Ç–∫–∏...")
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–µ—Ç–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    branches = [
        "main",
        "develop", 
        "feature/covenant-badge",
        "demo/multiple-files",
        "feature/new-features",
        "hotfix/bug-fixes"
    ]
    
    success_count = 0
    
    for branch in branches:
        print(f"\nüîÑ –†–∞–±–æ—Ç–∞–µ–º —Å –≤–µ—Ç–∫–æ–π: {branch}")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–µ—Ç–∫—É
        if run_command(f"git checkout {branch}", f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ {branch}"):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Ç–∫—É
            if run_command(f"git push origin {branch}", f"–ó–∞–≥—Ä—É–∑–∫–∞ {branch}"):
                success_count += 1
                print(f"‚úÖ –í–µ—Ç–∫–∞ {branch} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Ç–∫–∏ {branch}")
        else:
            print(f"‚ö†Ô∏è  –í–µ—Ç–∫–∞ {branch} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(branches)} –≤–µ—Ç–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    return success_count > 0

def upload_tags():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ç–µ–≥–∏ –Ω–∞ GitHub"""
    print("\nüè∑Ô∏è  –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏...")
    
    success = run_command("git push --tags", "–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤")
    if success:
        print("‚úÖ –¢–µ–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤")
    
    return success

def verify_upload():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏"""
    print("\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏
    print("üìã –£–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏:")
    run_command("git branch -r", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤–µ—Ç–æ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥–∏
    print("\nüè∑Ô∏è  –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏:")
    run_command("git tag -l", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–≥–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    print("\nüìä –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:")
    run_command("git status", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –≤–µ—Ç–æ–∫ –∏ —Ç–µ–≥–æ–≤ –Ω–∞ GitHub")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not check_github_connection():
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Ç–∫–∏
    branches_success = upload_branches()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏
    tags_success = upload_tags()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    verify_upload()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üîó –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/pavelstepanovpm/CredAnlv2")
    print("")
    print("üìã –ß—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:")
    print("‚úÖ –í—Å–µ –≤–µ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub" if branches_success else "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Ç–æ–∫")
    print("‚úÖ –í—Å–µ —Ç–µ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub" if tags_success else "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤")
    print("‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    print("‚úÖ Backend (FastAPI + Quantlib)")
    print("‚úÖ Frontend (React/TypeScript)")
    print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ —Å–∫—Ä–∏–ø—Ç—ã")
    print("")
    print("üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ GitHub:")
    print("   https://github.com/pavelstepanovpm/CredAnlv2")
    
    if branches_success and tags_success:
        print("\nüéØ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å GitHub.")
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")

if __name__ == "__main__":
    main()
