#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∫ GitHub
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - –£—Å–ø–µ—à–Ω–æ")
            if result.stdout.strip():
                print(f"   {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå {description} - –û—à–∏–±–∫–∞")
            if result.stderr.strip():
                print(f"   {result.stderr.strip()}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –º—ã –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    if not run_command("git rev-parse --git-dir", "–ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"):
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'git init' —Å–Ω–∞—á–∞–ª–∞.")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    run_command("git status", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ç–∫–∏
    run_command("git branch -a", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ç–æ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–≥–∏
    run_command("git tag -l", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–≥–æ–≤")
    
    return True

def get_github_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
    print("\nüìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub:")
    print("=" * 50)
    
    username = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à GitHub username: ").strip()
    if not username:
        print("‚ùå Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return None
    
    repo_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: credanlv2): ").strip()
    if not repo_name:
        repo_name = "credanlv2"
    
    visibility = input("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±—É–¥–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–º? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: y): ").strip().lower()
    is_public = visibility != 'n'
    
    return {
        'username': username,
        'repo_name': repo_name,
        'is_public': is_public
    }

def create_github_commands(github_info):
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub"""
    username = github_info['username']
    repo_name = github_info['repo_name']
    
    print(f"\nüöÄ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub:")
    print("=" * 50)
    
    print(f"1. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub:")
    print(f"   https://github.com/new")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {repo_name}")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: Credit Portfolio Analytics System - FastAPI + React")
    print(f"   –í–∏–¥–∏–º–æ—Å—Ç—å: {'Public' if github_info['is_public'] else 'Private'}")
    print(f"   –ù–ï –¥–æ–±–∞–≤–ª—è–π—Ç–µ README, .gitignore, license")
    
    print(f"\n2. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã:")
    print(f"   git remote add origin https://github.com/{username}/{repo_name}.git")
    print(f"   git remote -v")
    print(f"   git push -u origin main")
    print(f"   git push origin develop")
    print(f"   git push origin feature/new-features")
    print(f"   git push origin hotfix/bug-fixes")
    print(f"   git push --tags")
    
    return f"https://github.com/{username}/{repo_name}.git"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üêô –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    if not check_git_status():
        return
    
    # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GitHub
    github_info = get_github_info()
    if not github_info:
        return
    
    # –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
    repo_url = create_github_commands(github_info)
    
    # –°–ø—Ä–æ—Å–∏—Ç—å, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    auto_execute = input("\nü§ñ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): ").strip().lower()
    
    if auto_execute == 'y':
        print("\nüöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
        
        # –î–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        remote_cmd = f"git remote add origin {repo_url}"
        if run_command(remote_cmd, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"):
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            run_command("git remote -v", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Ç–∫–∏
            run_command("git push -u origin main", "–û—Ç–ø—Ä–∞–≤–∫–∞ main –≤–µ—Ç–∫–∏")
            run_command("git push origin develop", "–û—Ç–ø—Ä–∞–≤–∫–∞ develop –≤–µ—Ç–∫–∏")
            run_command("git push origin feature/new-features", "–û—Ç–ø—Ä–∞–≤–∫–∞ feature –≤–µ—Ç–∫–∏")
            run_command("git push origin hotfix/bug-fixes", "–û—Ç–ø—Ä–∞–≤–∫–∞ hotfix –≤–µ—Ç–∫–∏")
            run_command("git push --tags", "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–≥–æ–≤")
            
            print(f"\nüéâ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ GitHub!")
            print(f"üîó URL: {repo_url}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
    else:
        print(f"\nüìã –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub")
        print(f"üîó URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repo_url}")

if __name__ == "__main__":
    main()
