#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub
"""

import subprocess
import sys
import webbrowser
from pathlib import Path

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - –£—Å–ø–µ—à–Ω–æ")
            if result.stdout.strip():
                print(f"   {result.stdout.strip()}")
            return True, result.stdout.strip()
        else:
            print(f"‚ùå {description} - –û—à–∏–±–∫–∞")
            if result.stderr.strip():
                print(f"   {result.stderr.strip()}")
            return False, result.stderr.strip()
    except Exception as e:
        print(f"‚ùå {description} - –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False, str(e)

def check_github_repo():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub...")
    
    # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    success, output = run_command(
        "git ls-remote https://github.com/pavelstepanovpm/credanlv2.git",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    )
    
    if success:
        print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ GitHub")
        return True
    else:
        print("‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ GitHub")
        return False

def check_github_cli():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ GitHub CLI"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub CLI...")
    
    success, output = run_command("gh --version", "–ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub CLI")
    
    if success:
        print("‚úÖ GitHub CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    else:
        print("‚ùå GitHub CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def create_repo_with_cli():
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —á–µ—Ä–µ–∑ GitHub CLI"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —á–µ—Ä–µ–∑ GitHub CLI...")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    auth_success, _ = run_command("gh auth status", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ GitHub CLI")
    if not auth_success:
        print("‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ GitHub CLI")
        print("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: gh auth login")
        return False
    
    # –°–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    create_success, output = run_command(
        "gh repo create credanlv2 --public --description 'Credit Portfolio Analytics System - FastAPI + React/TypeScript'",
        "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    )
    
    if create_success:
        print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ GitHub CLI")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —á–µ—Ä–µ–∑ GitHub CLI")
        return False

def open_github_create_page():
    """–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
    print("üåê –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
    
    url = "https://github.com/new"
    print(f"üîó –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {url}")
    
    try:
        webbrowser.open(url)
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
        return False

def show_manual_instructions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è"""
    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤—Ä—É—á–Ω—É—é:")
    print("=" * 60)
    print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://github.com/new")
    print("2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:")
    print("   - Repository name: credanlv2")
    print("   - Description: Credit Portfolio Analytics System - FastAPI + React/TypeScript")
    print("   - Visibility: Public")
    print("   - –ù–ï –¥–æ–±–∞–≤–ª—è–π—Ç–µ README, .gitignore, license")
    print("3. –ù–∞–∂–º–∏—Ç–µ 'Create repository'")
    print("4. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("   git push -u origin main")
    print("   git push origin develop")
    print("   git push origin feature/new-features")
    print("   git push origin hotfix/bug-fixes")
    print("   git push --tags")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üêô –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if check_github_repo():
        print("\nüéâ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        print("üîó URL: https://github.com/pavelstepanovpm/credanlv2")
        return
    
    print("\n‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º...")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å GitHub CLI
    if check_github_cli():
        print("\nü§ñ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ GitHub CLI...")
        if create_repo_with_cli():
            print("\nüéâ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ GitHub CLI!")
            print("üîó URL: https://github.com/pavelstepanovpm/credanlv2")
            return
    
    print("\nüåê –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
    open_github_create_page()
    show_manual_instructions()
    
    print("\n‚è≥ –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub:")
    print("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python3 push_to_github.py")

if __name__ == "__main__":
    main()
