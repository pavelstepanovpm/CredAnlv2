#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –Ω–∞ GitHub –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
"""

import subprocess
import sys
import time
from pathlib import Path

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - –£—Å–ø–µ—à–Ω–æ")
            if result.stdout.strip():
                print(f"   {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå {description} - –û—à–∏–±–∫–∞")
            if result.stderr.strip():
                print(f"   {result.stderr.strip()}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def check_repo_exists():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub...")
    
    success = run_command(
        "git ls-remote https://github.com/pavelstepanovpm/credanlv2.git",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    )
    
    if success:
        print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ GitHub")
        return True
    else:
        print("‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ GitHub")
        print("   –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ https://github.com/new")
        return False

def push_to_github():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –Ω–∞ GitHub"""
    print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ GitHub...")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub...")
    success = run_command("git remote -v", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
    if not success:
        print("‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å main –≤–µ—Ç–∫—É
    print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ main –≤–µ—Ç–∫–∏...")
    if not run_command("git push -u origin main", "–û—Ç–ø—Ä–∞–≤–∫–∞ main –≤–µ—Ç–∫–∏"):
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ main –≤–µ—Ç–∫–∏")
        return False
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏
    branches = ["develop", "feature/new-features", "hotfix/bug-fixes"]
    
    for branch in branches:
        print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {branch} –≤–µ—Ç–∫–∏...")
        success = run_command(f"git push origin {branch}", f"–û—Ç–ø—Ä–∞–≤–∫–∞ {branch} –≤–µ—Ç–∫–∏")
        if not success:
            print(f"‚ö†Ô∏è  {branch} –≤–µ—Ç–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–≥–∏
    print("\nüè∑Ô∏è  –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–≥–æ–≤...")
    if not run_command("git push --tags", "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–≥–æ–≤"):
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–≥–æ–≤")
        return False
    
    return True

def verify_upload():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ç–∫–∏
    success = run_command("git branch -r", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤–µ—Ç–æ–∫")
    if success:
        print("‚úÖ –í–µ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–≥–∏
    success = run_command("git tag -l", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–≥–æ–≤")
    if success:
        print("‚úÖ –¢–µ–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üêô –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ GitHub")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if not check_repo_exists():
        print("\n‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ GitHub")
        print("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://github.com/new")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º 'credanlv2'")
        print("3. –ù–ï –¥–æ–±–∞–≤–ª—è–π—Ç–µ README, .gitignore, license")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        return
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥
    if push_to_github():
        print("\nüéâ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ GitHub!")
        print("üîó –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/pavelstepanovpm/credanlv2")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
        verify_upload()
        
        print("\nüìã –ß—Ç–æ –¥–∞–ª—å—à–µ:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://github.com/pavelstepanovpm/credanlv2")
        print("2. –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
        print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ–≥–∏ (topics)")
        print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–∞—â–∏—Ç—É –≤–µ—Ç–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –Ω–∞ GitHub")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub")
        print("2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        print("3. –ï—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é")

if __name__ == "__main__":
    main()
