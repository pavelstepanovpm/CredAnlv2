name: 🚀 Production Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Тестирование
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧪 Run Python tests
      run: |
        python -m pytest tests/ || echo "No tests found, skipping..."
        
    - name: 🔍 Lint Python code
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting completed"
        
    - name: 📋 Check code quality
      run: |
        echo "✅ Code quality check completed"

  # Сборка и публикация Docker образов
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && needs.test.result == 'success'))
    needs: [test]
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗️ Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🏗️ Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Развертывание на продакшен сервер
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && needs.build-and-push.result == 'success'))
    needs: [build-and-push]
    
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}
        
    - name: 🚀 Deploy to production server
      run: |
        echo "🚀 Начинаем развертывание на продакшен сервер..."
        
        # Создание временного скрипта развертывания
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "📋 Обновление проекта..."
        cd ${{ secrets.PROJECT_PATH }}
        
        # Остановка контейнеров
        echo "⏹️ Остановка контейнеров..."
        docker-compose down || true
        
        # Обновление кода
        echo "📥 Обновление кода..."
        git fetch origin
        git reset --hard origin/main
        
        # Обновление docker-compose.yml с новыми образами
        echo "🐳 Обновление Docker образов..."
        cat > docker-compose.yml << 'DOCKEREOF'
        version: '3.8'
        
        services:
          # Backend API
          backend:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
            ports:
              - "8001:8000"
            environment:
              - DATABASE_URL=postgresql://credit_user:credit_pass@db:5432/credit_analytics
              - REDIS_URL=redis://redis:6379
              - PYTHONPATH=/app
            depends_on:
              - db
              - redis
            networks:
              - credit-network
        
          # Frontend React App
          frontend:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
            ports:
              - "3002:80"
            depends_on:
              - backend
            networks:
              - credit-network
        
          # PostgreSQL Database
          db:
            image: postgres:13-alpine
            environment:
              POSTGRES_DB: credit_analytics
              POSTGRES_USER: credit_user
              POSTGRES_PASSWORD: credit_pass
            volumes:
              - postgres_data:/var/lib/postgresql/data
            ports:
              - "5433:5432"
            networks:
              - credit-network
        
          # Redis for caching
          redis:
            image: redis:6-alpine
            ports:
              - "6379:6379"
            volumes:
              - redis_data:/data
            networks:
              - credit-network
        
        volumes:
          postgres_data:
          redis_data:
        
        networks:
          credit-network:
            driver: bridge
        DOCKEREOF
        
        # Запуск контейнеров
        echo "🚀 Запуск контейнеров..."
        docker-compose up -d
        
        # Ожидание запуска
        echo "⏳ Ожидание запуска сервисов..."
        sleep 30
        
        # Проверка статуса
        echo "🔍 Проверка статуса контейнеров..."
        docker-compose ps
        
        # Проверка работоспособности
        echo "🧪 Проверка работоспособности..."
        
        # Проверка Frontend
        if curl -f -s http://localhost:3002 > /dev/null; then
          echo "✅ Frontend работает"
        else
          echo "❌ Frontend недоступен"
          exit 1
        fi
        
        # Проверка Backend
        if curl -f -s http://localhost:8001/docs > /dev/null; then
          echo "✅ Backend работает"
        else
          echo "❌ Backend недоступен"
          exit 1
        fi
        
        echo "🎉 Развертывание завершено успешно!"
        EOF
        
        # Выполнение развертывания
        scp -o StrictHostKeyChecking=no deploy.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "chmod +x /tmp/deploy.sh && /tmp/deploy.sh"
        
    - name: 🧪 Health Check
      run: |
        echo "🔍 Проверка работоспособности после развертывания..."
        
        # Ожидание запуска
        sleep 10
        
        # Проверка Frontend
        if curl -f -s http://${{ secrets.SERVER_HOST }}:3002 > /dev/null; then
          echo "✅ Frontend доступен: http://${{ secrets.SERVER_HOST }}:3002"
        else
          echo "❌ Frontend недоступен"
          exit 1
        fi
        
        # Проверка Backend
        if curl -f -s http://${{ secrets.SERVER_HOST }}:8001/docs > /dev/null; then
          echo "✅ Backend доступен: http://${{ secrets.SERVER_HOST }}:8001/docs"
        else
          echo "❌ Backend недоступен"
          exit 1
        fi
        
        echo "🎉 Все сервисы работают корректно!"
        
    - name: 📊 Deployment Summary
      run: |
        echo "## 🎉 Развертывание завершено успешно!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Информация о развертывании:" >> $GITHUB_STEP_SUMMARY
        echo "- **Версия**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Ветка**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Время**: \`$(date)\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Доступные сервисы:" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend**: [http://${{ secrets.SERVER_HOST }}:3002](http://${{ secrets.SERVER_HOST }}:3002)" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend API**: [http://${{ secrets.SERVER_HOST }}:8001/docs](http://${{ secrets.SERVER_HOST }}:8001/docs)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🐳 Docker образы:" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
